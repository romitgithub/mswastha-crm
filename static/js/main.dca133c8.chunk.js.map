{"version":3,"sources":["store/initialState.ts","containers/Login/actionType.enum.ts","containers/Login/reducer.ts","containers/PatientRecords/actionType.enum.ts","containers/PatientRecords/reducer.ts","store/rootReducer.ts","store/index.ts","services/event.service.ts","services/cookie.service.ts","config/app.config.ts","services/data.service.ts","components/ProtectedRoute.tsx","assets/img/mswasth-mock.png","components/Header/index.tsx","containers/Login/actions.ts","containers/Login/index.tsx","containers/Landing/index.tsx","containers/PatientRecords/actions.ts","containers/PatientRecords/index.tsx","router/index.tsx","reportWebVitals.ts","index.tsx"],"names":["APP_INITIAL_STATE","loading","loginReducer","loginDetails","username","password","userDetails","loggedIn","loggedOut","patientRecordsReducer","patientRecords","list","pagination","pageNumber","pageSize","ACTION_TYPE","LOGIN_USER","UPDATE_LOGIN_DETAILS","LOGIN_SUCCESS","LOGOUT_USER","state","action","type","APP_ACTION_TYPE","data","PATIENT_RECORDS_SUCCESS","PATIENT_RECORDS_ERROR","newState","appReducer","combineReducers","store","createStore","rootReducer","applyMiddleware","thunk","EventManager","events","eventName","callback","this","push","instance","EventService","getInstance","CookieService","name","value","expireInDays","expireInString","date","Date","setTime","getTime","toUTCString","document","cookie","Promise","resolve","reject","split","reduce","prev","current","e","cookies","c","length","d","window","location","hostname","cookieBase","encodeURIComponent","join","p","pathname","pop","shift","cookieService","process","API_CONTEXT","getApiContext","console","log","ENVIRONMENT","localStorage","getItem","HttpService","globalOptions","CACHE","isObjectEmpty","empty","Object","keys","constructor","initConfigs","mode","headers","accept","get","error","access_token","user","JSON","parse","set","getAccessTokenFromStorage","authToken","authorization","ret","undefined","url","config","i","urlMap","hasOwnProperty","replace","queryParams","encodeQueryData","apiParams","absolutePathTest","RegExp","test","prepare","createQueryParams","getGlobalOptions","options","parsedUrl","getAbsoluteApiPath","fake","getFakeResponse","timeout","shouldReject","_get","optionsToSubmit","method","fetch","then","res","json","extractedResp","extractData","catch","err","handleError","body","formData","FormData","isUploadingAFile","fileUpload","key","call","append","stringify","assign","originalResponse","extractedResponse","redirectOn401","statusText","errorMessage","canShowMessage","showMessage","openSnackBar","message","status","triggerLogoutAction","dispatch","validationErrors","validationErrorList","title","variant","setTimeout","login","logout","getPatientRecords","DataService","ProtectedRoute","path","Component","component","rest","loggedInUser","getLoggedInUserFromStorage","render","props","to","Header","onLoginClick","onLogoutClick","className","onClick","saveUserDetails","ACTION_TYPES","Login","updateUsername","updateLoginDetails","updatePassword","onChange","target","loginUser","React","connect","response","msg","Modal","setAppElement","customStyles","overlay","inset","backgroundColor","content","border","background","top","transform","Landing","handleLoginClick","setState","isLoginModalOpen","src","mSwasthMockImg","isOpen","onRequestClose","style","shouldCloseOnOverlayClick","shouldCloseOnEsc","contentLabel","dummyPatientRecords","mobileNumber","lastCheckupTimestamp","nextCheckupTimestamp","totalPages","PatientRecords","getAuthDetails","history","logoutUser","map","patientItem","index","contact_number","next_checkdate","doc_id","a","router","basename","exact","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dca133c8.chunk.js","sourcesContent":["const APP_INITIAL_STATE: any = {\n  loading: false,\n  loginReducer: {\n    loginDetails: {\n      username: '',\n      password: ''\n    },\n    userDetails: null,\n    loggedIn: false,\n    loggedOut: false\n  },\n  patientRecordsReducer: {\n    patientRecords: {\n      list: [],\n      pagination: {\n        pageNumber: 1,\n        pageSize: 10\n      }\n    }\n  }\n}\n\nexport default APP_INITIAL_STATE\n","const ACTION_TYPE = {\n  LOGIN_USER: \"LOGIN_USER\",\n  UPDATE_LOGIN_DETAILS: \"UPDATE_LOGIN_DETAILS\",\n  LOGIN_SUCCESS: \"LOGIN_SUCCESS\",\n  LOGOUT_USER: \"LOGOUT_USER\"\n}\n\nexport default ACTION_TYPE\n","import APP_INITIAL_STATE from \"../../store/initialState\"\nimport APP_ACTION_TYPE from \"./actionType.enum\"\n\nconst loginReducer = (\n  state = APP_INITIAL_STATE.loginReducer,\n  action: { type: string; data: { [key: string]: any } }\n) => {\n  let newState;\n  switch (action.type) {\n    case APP_ACTION_TYPE.UPDATE_LOGIN_DETAILS:\n      newState = {\n        ...state,\n        loginDetails: action.data\n      }\n      return newState;\n    case APP_ACTION_TYPE.LOGIN_SUCCESS:\n      newState = {\n        ...state,\n        userDetails: action.data,\n        loggedIn: true,\n        loggedOut: false\n      }\n      return newState;\n    case APP_ACTION_TYPE.LOGOUT_USER:\n      newState = {\n        ...state,\n        userDetails: action.data,\n        loggedIn: false,\n        loggedOut: true\n      }\n      return newState;\n    \n    default:\n      return state\n  }\n}\n\nexport default loginReducer\n","const ACTION_TYPE = {\n  PATIENT_RECORDS_SUCCESS: 'PATIENT_RECORDS_SUCCESS',\n  PATIENT_RECORDS_ERROR: 'PATIENT_RECORDS_ERROR'\n}\n\nexport default ACTION_TYPE","import APP_INITIAL_STATE from \"../../store/initialState\"\nimport APP_ACTION_TYPE from \"./actionType.enum\"\n\nconst patientRecordsReducer = (\n  state = APP_INITIAL_STATE.patientRecordsReducer,\n  action: { type: string; data: { [key: string]: any } }\n) => {\n  switch (action.type) {\n    case APP_ACTION_TYPE.PATIENT_RECORDS_SUCCESS:\n      let newState = {\n        ...state,\n        patientRecords: action.data\n      }\n      return newState;\n    default:\n      return state\n  }\n}\n\nexport default patientRecordsReducer\n","import { combineReducers } from \"redux\"\n\nimport loginReducer from \"../containers/Login/reducer\"\nimport patientRecordsReducer from \"../containers/PatientRecords/reducer\"\n\nconst appReducer = combineReducers({ loginReducer, patientRecordsReducer })\n\nexport default appReducer\n","import { createStore, applyMiddleware } from \"redux\"\nimport thunk from \"redux-thunk\"\nimport rootReducer from \"./rootReducer\"\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nexport default store\n","class EventManager {\n  private static instance: EventManager\n\n  /**\n   * The Singleton's constructor should always be private to prevent direct\n   * construction calls with the `new` operator.\n   */\n  private constructor() {}\n\n  /**\n   * The static method that controls the access to the singleton instance.\n   *\n   * This implementation let you subclass the Singleton class while keeping\n   * just one instance of each subclass around.\n   */\n  public static getInstance(): EventManager {\n    if (!EventManager.instance) {\n      EventManager.instance = new EventManager()\n    }\n\n    return EventManager.instance\n  }\n\n  events: any = {}\n\n  subscribe(eventName: string, callback: Function) {\n    this.events[eventName] = this.events[eventName] || []\n    this.events[eventName].push(callback)\n  }\n\n  dispatch(eventName: string, data: any) {\n    if (this.events[eventName]) {\n      for (const callback of this.events[eventName]) {\n        callback(data)\n      }\n    }\n  }\n}\n\nconst EventService = EventManager.getInstance()\n\nexport default EventService\n","class CookieService {\n  private static instance: CookieService\n\n  /**\n   * The Singleton's constructor should always be private to prevent direct\n   * construction calls with the `new` operator.\n   */\n  private constructor() {}\n\n  /**\n   * The static method that controls the access to the singleton instance.\n   *\n   * This implementation let you subclass the Singleton class while keeping\n   * just one instance of each subclass around.\n   */\n  public static getInstance(): CookieService {\n    if (!CookieService.instance) {\n      CookieService.instance = new CookieService()\n    }\n\n    return CookieService.instance\n  }\n\n  async set(name: string, value: any, expireInDays: number = -1) {\n    let expireInString = '';\n    if (expireInDays !== -1) {\n        var date = new Date();\n        date.setTime(date.getTime() + (expireInDays*24*60*60*1000));\n        expireInString = \"; expires=\" + date.toUTCString();\n    }\n    document.cookie = name + \"=\" + (value || \"\")  + expireInString + \"; path=/\";\n  }\n\n  async get(name: any) {\n    return new Promise((resolve, reject) => {\n      try {\n        const cookies = document.cookie\n          .split(\"; \")\n          .reduce((prev: any, current: any) => {\n            const [name, value] = current.split(\"=\")\n            prev[name] = value\n            return prev\n          }, {})\n        resolve(cookies)\n      } catch (e) {\n        reject(e)\n      }\n    })\n  }\n\n  async clearAll() {\n    return new Promise((resolve, reject) => {\n      const cookies = document.cookie.split(\"; \")\n      for (let c = 0; c < cookies.length; c++) {\n        const d = window.location.hostname.split(\".\")\n        while (d.length > 0) {\n          const cookieBase =\n            encodeURIComponent(cookies[c].split(\";\")[0].split(\"=\")[0]) +\n            \"=; expires=Thu, 01-Jan-1970 00:00:01 GMT; domain=\" +\n            d.join(\".\") +\n            \" ;path=\"\n          const p = window.location.pathname.split(\"/\")\n          document.cookie = cookieBase + \"/\"\n          while (p.length > 0) {\n            document.cookie = cookieBase + p.join(\"/\")\n            p.pop()\n          }\n          d.shift()\n        }\n      }\n      resolve(cookies)\n    })\n  }\n}\n\nconst cookieService = CookieService.getInstance()\nexport default cookieService\n","declare const process: any\n\nexport let APP_UI_CONFIG = {\n  apiHost: \"\",\n  apiContext: process.env.API_CONTEXT,\n  localStorageCacheExpiry: 15 * 60 * 1000,\n  refreshTimes: { SYSTEM_HEALTH: 60 * 1000 },\n  FALLBACK_CONFIG: {},\n}\n\nexport function getApiContext() {\n  console.log(process.env);\n  const isProd = process.env.ENVIRONMENT === \"production\"\n  if (isProd) {\n    return process.env.REACT_APP_API_CONTEXT\n  } else {\n    if (typeof window !== \"undefined\") {\n      return window &&\n        window.localStorage &&\n        window.localStorage.getItem(\"backend\")\n        ? localStorage.getItem(\"backend\")\n        : process.env.REACT_APP_API_CONTEXT\n    } else {\n      return process.env.REACT_APP_API_CONTEXT\n    }\n  }\n}\n","import EventService from \"./event.service\"\nimport CookieService from \"./cookie.service\"\nimport { getApiContext } from \"../config/app.config\"\n\nclass HttpService {\n  private static instance: HttpService\n\n  /**\n   * The Singleton's constructor should always be private to prevent direct\n   * construction calls with the `new` operator.\n   */\n  private constructor() {\n    this.initConfigs()\n  }\n\n  /**\n   * The static method that controls the access to the singleton instance.\n   *\n   * This implementation let you subclass the Singleton class while keeping\n   * just one instance of each subclass around.\n   */\n  public static getInstance(): HttpService {\n    if (!HttpService.instance) {\n      HttpService.instance = new HttpService()\n    }\n\n    return HttpService.instance\n  }\n  globalOptions: any = {}\n  CACHE = {}\n  API_CONTEXT = getApiContext()\n\n  /**\n   * List of urls to be used in the whole app. Hit api with name of url. Not the exact url.\n   * @type [{string:string}]\n   */\n  static urlMap: any = {\n    login: \"/doc_login/{username}/{password}/\",\n    logout: \"/user/logout\",\n    getPatientRecords: \"view_patient_records/{username}/{password}/\"\n  }\n\n  /**\n   * Initialize configurations for http client of application\n   */\n  initConfigs() {\n    this.globalOptions = {\n      mode: \"cors\", // no-cors, cors, *same-origin\n      headers: {\n        accept: \"application/json\",\n        \"content-type\": \"application/json\",\n      },\n    }\n    this.API_CONTEXT = getApiContext();\n  }\n\n  async getAccessTokenFromStorage() {\n    let value:any\n    try {\n      value = await CookieService.get(this.API_CONTEXT)\n    } catch (e) {\n      console.error(\"DataService\", e)\n    }\n    return value ? value.access_token : null\n  }\n\n  async getLoggedInUserFromStorage() {\n    let value:any\n    try {\n      value = await CookieService.get(this.API_CONTEXT)\n    } catch (e) {\n      console.error(\"DataService\", e)\n    }\n    return value && value.user && !this.isObjectEmpty(value.user) ? JSON.parse(value.user) : null\n  }\n\n  async logoutUser() {\n    await CookieService.set('user', null);\n  }\n\n  async getGlobalOptions() {\n    const authToken = await this.getAccessTokenFromStorage()\n    if (authToken) {\n      return {\n        ...this.globalOptions,\n        headers: {\n          ...this.globalOptions.headers,\n          authorization: \"Bearer \" + (authToken || \"\"),\n        },\n      }\n    } else {\n      return this.globalOptions\n    }\n  }\n\n  /**\n   * Creates a url query param string out of key value pairs provided\n   * @param {key: valuePair}\n   * @returns {string}\n   * encodeQueryData({name: 'promil',age:'100'}) => &name=promil&age=100\n   */\n  encodeQueryData(data: any) {\n    const ret = []\n    for (const d in data) {\n      if (data[d] !== undefined && data[d] !== null) {\n        ret.push(encodeURIComponent(d) + \"=\" + encodeURIComponent(data[d]))\n      }\n    }\n    return ret.length ? \"?\" + ret.join(\"&\") : \"\"\n  }\n\n  /**\n   *\n   * @param {string} url:  Name of url in this.urlMap\n   * @param config  [name: valuePair]\n   * @returns {string}\n   * urlMap= {deleteUser: '/user/{userId}/delete}; prepare('deleteUser',{userId: 10}) => /user/10/delete\n   */\n  prepare(url: string, config: any) {\n    url = HttpService.urlMap[url] || url\n    for (const i in config) {\n      if (config.hasOwnProperty(i)) {\n        url = url.replace(\"{\" + i + \"}\", config[i])\n      }\n    }\n    return url\n  }\n\n  /**\n   * Merge passed query params with global query params . Create a queryParam string from final object\n   * @param queryParams\n   * @returns {string}\n   */\n  createQueryParams(queryParams: any) {\n    queryParams = { ...queryParams}\n    return this.encodeQueryData(queryParams)\n  }\n\n  /**\n   * Generate an absolute path out of\n   * @param {string} url:  name of url in urlMap\n   * @param apiParams:     an object containing all api params\n   * @param queryParams    an object containing all query params\n   * @returns {string}     final absolute path => http://api.com/name?name=promil\n   */\n  getAbsoluteApiPath(\n    url:string,\n    apiParams:any,\n    queryParams:any,\n    config:any = {\n      onSocket: false,\n    }\n  ) {\n    const absolutePathTest = new RegExp(\"^(?:[a-z]+:)?//\", \"i\")\n\n    if (absolutePathTest.test(url)) {\n      return this.prepare(url, apiParams) + this.createQueryParams(queryParams)\n    } else if (absolutePathTest.test(HttpService.urlMap[url])) {\n      return (\n        this.prepare(HttpService.urlMap[url], apiParams) +\n        this.createQueryParams(queryParams)\n      )\n    } else {\n      let apiBase = \"\"\n      url = this.prepare(url, apiParams)\n      apiBase = this.API_CONTEXT\n      return apiBase + url + this.createQueryParams(queryParams)\n    }\n  }\n\n  /**\n   * A helper wrapper over angular get method.\n   * @param {string} url :  name of path in urlMap\n   * @param apiParams:   {'string': value}\n   * @param queryParams  {[name: string]: string}\n   * @param config   { 'cache': true, 'fake' ?: boolean, 'data'?: any }  whether response to this api should cached\n   * @returns {Promise<ArrayBuffer>}\n   */\n  async get(url: string, apiParams: any, queryParams: any, config: any = {}) {\n    // queryParams.time = new Date().getTime();\n    const globalOptions = await this.getGlobalOptions()\n    const options = { ...globalOptions, ...config }\n    const parsedUrl = this.getAbsoluteApiPath(\n      url,\n      apiParams,\n      queryParams,\n      config\n    )\n    if (config && config.fake) {\n      return this.getFakeResponse(\n        config.data,\n        config.timeout || 2000,\n        config.shouldReject\n      )\n    }\n    return this._get(parsedUrl, options)\n  }\n\n  /**\n   * Internal method. Make a get http call. parse response. handle errors.\n   * @param url\n   * @param options\n   * @returns {Promise<never | ArrayBuffer>}\n   * @\n   */\n  _get(url: string, options: any) {\n    const optionsToSubmit = {\n      method: \"GET\", // *GET, POST, PUT, DELETE, etc.\n      ...options,\n    }\n    return fetch(url, optionsToSubmit)\n      .then(res => {\n        return res\n          .json()\n          .then(json => {\n            return {\n              extractedResp: json,\n              res,\n            }\n          })\n          .then(({ extractedResp, res }) => {\n            return this.extractData(res, options, extractedResp)\n          })\n          .catch(err => {\n            return this.handleError(err, options)\n          })\n      })\n      .catch(err => {\n        try {\n          return this.handleError(err, options)\n        } catch (e) {\n          console.error(e)\n        }\n      })\n  }\n\n  /**\n   * Wrapper function over angular post method\n   * @param {string} url\n   * @param apiParams\n   * @param body\n   * @param config\n   * @returns {Promise<never | ArrayBuffer>}\n   */\n  async post(url:string, apiParams:any, body:any, config:any) {\n    const formData = new FormData()\n    const isUploadingAFile = config && config.fileUpload === true\n    const parsedUrl = this.getAbsoluteApiPath(url, apiParams, {}, config)\n    const globalOptions = await this.getGlobalOptions()\n    const options = { ...globalOptions, ...config }\n\n    if (options && options.fake) {\n      return this.getFakeResponse(\n        options.data,\n        options.timeout || 2000,\n        options.shouldReject\n      )\n    }\n\n    if (isUploadingAFile) {\n      // browser will automatically detect content type and set appropriate multipart boundary\n      delete options.headers[\"Content-Type\"]\n      for (const key in body) {\n        if (Object.hasOwnProperty.call(body, key)) {\n          formData.append(key, body[key])\n        }\n      }\n    }\n\n    return fetch(parsedUrl, {\n      method: \"POST\", // *GET, POST, PUT, DELETE, etc.\n      ...options,\n      body: isUploadingAFile ? formData : JSON.stringify(body), // body data type must match \"Content-Type\" header\n    })\n      .then(res => {\n        return res.json().then(json => {\n          return {\n            extractedResp: json,\n            res,\n          }\n        })\n      })\n      .then(({ extractedResp, res }) =>\n        this.extractData(res, options, extractedResp)\n      )\n      .catch(err => {\n        return this.handleError(err, options)\n      })\n  }\n\n  /**\n   * Wrapper function over angular put method\n   * @param {string} url\n   * @param apiParams\n   * @param body\n   * @param config\n   * @returns {Promise<never | ArrayBuffer>}\n   */\n  async put(url:any, apiParams:any, body:any, config?:any) {\n    // queryParams.time = new Date().getTime();\n    const globalOptions = await this.getGlobalOptions()\n    const options = { ...globalOptions, ...config }\n    const parsedUrl = this.getAbsoluteApiPath(url, apiParams, {}, config)\n    return fetch(parsedUrl, {\n      method: \"PUT\", // *GET, POST, PUT, DELETE, etc.\n      ...options,\n      body: JSON.stringify(body),\n    })\n      .then(res => {\n        return res.json().then(json => {\n          return {\n            extractedResp: json,\n            res,\n          }\n        })\n      })\n      .then(({ extractedResp, res }) =>\n        this.extractData(res, options, extractedResp)\n      )\n      .catch(err => {\n        return this.handleError(err, options)\n      })\n  }\n\n  /**\n   * Wrapper function over angular put method\n   * @param {string} url\n   * @param apiParams\n   * @param body\n   * @param config\n   * @returns {Promise<never | ArrayBuffer>}\n   */\n  patch(url:any, apiParams:any, body:any, config:any) {\n    const parsedUrl = this.getAbsoluteApiPath(url, apiParams, {}, config)\n    const options = Object.assign({}, this.getGlobalOptions(), ...config)\n    return fetch(parsedUrl, {\n      method: \"PATCH\", // *GET, POST, PUT, DELETE, etc.\n      ...options,\n      body: JSON.stringify(body),\n    })\n      .then(res => {\n        return res.json().then(json => {\n          return {\n            extractedResp: json,\n            res,\n          }\n        })\n      })\n      .then(({ extractedResp, res }) =>\n        this.extractData(res, options, extractedResp)\n      )\n      .catch(err => {\n        return this.handleError(err, options)\n      })\n  }\n\n  async delete(url:any, apiParams:any, config:any) {\n    const globalOptions = await this.getGlobalOptions()\n    const parsedUrl = this.getAbsoluteApiPath(url, apiParams, {}, config)\n    const options = { ...globalOptions, ...config }\n    return fetch(parsedUrl, {\n      method: \"DELETE\", // *GET, POST, PUT, DELETE, etc.\n      ...options,\n    })\n      .then(res => {\n        return res.json().then(json => {\n          return {\n            extractedResp: json,\n            res,\n          }\n        })\n      })\n      .then(({ extractedResp, res }) =>\n        this.extractData(res, options, extractedResp)\n      )\n      .catch(err => {\n        return this.handleError(err, options)\n      })\n  }\n\n  /**\n   * Handle http response received. Code 0 means successful response. Any other code means error in response\n   * @param res\n   * @param config\n   * @returns {any}\n   */\n\n  extractData(originalResponse:any, config:any, extractedResponse:any) {\n    config = config || {}\n\n    /** workaround for non rest api, ONLY DEMO PURPOSE */\n    return extractedResponse;\n    /** workaround for non rest api, ONLY DEMO PURPOSE */\n\n    if (originalResponse && originalResponse.status >= 400) {\n      /**\n       * Anything other then code 0 throws an error. Will be handled by handleError method\n       */\n      throw { ...extractedResponse, status: originalResponse.status }\n    } else if (extractedResponse.code !== 0) {\n      throw { ...extractedResponse, status: originalResponse.status }\n    } else {\n      let canShowMessage = false\n      if (\n        Object.hasOwnProperty.call(config, \"showMessage\") &&\n        config.showMessage === true\n      ) {\n        canShowMessage = true\n      }\n\n      if (canShowMessage && extractedResponse.message) {\n        this.openSnackBar(\"\", extractedResponse.message, \"success\")\n      }\n      return extractedResponse\n    }\n  }\n\n  async handleError(error:any, config:any) {\n    try {\n      config = config || {}\n\n      /**\n       * By default 401 error redirects to login page. But if already on login page, use this flag to prevent redirect loop\n       */\n      if (!config.hasOwnProperty(\"redirectOn401\")) {\n        config.redirectOn401 = true\n      }\n\n      const statusText = error.statusText,\n        errorMessage = error.body\n\n      let canShowMessage = true\n      if (\n        Object.hasOwnProperty.call(config, \"showMessage\") &&\n        config.showMessage === false\n      ) {\n        canShowMessage = false\n      }\n\n      if (canShowMessage) {\n        this.openSnackBar(\n          statusText,\n          errorMessage ||\n            error.message ||\n            error.status ||\n            \"Something went wrong!\",\n          \"error\"\n        )\n      }\n\n      if (error.status === 401 && config.redirectOn401) {\n        await this.triggerLogoutAction()\n      }\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  async triggerLogoutAction() {\n    try {\n      EventService.dispatch(\"LOGOUT\", {})\n    } catch (e) {\n      console.error(e)\n    }\n  }\n\n  getMessageFromList(error:any) {\n    const list = error.validationErrors || error.validationErrorList || []\n    if (list && list.length) {\n      return list[0].message\n    } else {\n      return \"\"\n    }\n  }\n\n  /**\n   * A wrapper over angular toast method to show success and error toasts to users\n   * @param {...messageKeys}\n   * @param config\n   */\n  openSnackBar(title:string, message:string, variant:any) {\n    EventService.dispatch(\"toast\", {\n      title,\n      message,\n      variant,\n    })\n  }\n\n  getFakeResponse(data:any, timeout: number, shouldReject:boolean) {\n    return new Promise((resolve, reject) => {\n      window.setTimeout(() => {\n        if (typeof shouldReject === \"boolean\" && !shouldReject) {\n          reject(data)\n        } else {\n          resolve(data)\n        }\n      }, timeout)\n    })\n  }\n\n  isObjectEmpty = (empty: any) => {\n    return Object.keys(empty).length === 0 && empty.constructor === Object\n  }\n}\n\nconst DataService = HttpService.getInstance()\nexport default DataService\n","import React from 'react'\nimport { Redirect, Route } from 'react-router-dom'\nimport DataService from '../services/data.service';\n\nconst ProtectedRoute = ({ path, component: Component, ...rest }: { component: any, path: string }) => {\n  const loggedInUser = DataService.getLoggedInUserFromStorage();\n  return (\n    <Route {...rest} render={(props) => (\n      loggedInUser\n        ? <Component {...props} />\n        : <Redirect to='/login' />\n    )} />\n  )\n  \n}\n\nexport default ProtectedRoute;","export default __webpack_public_path__ + \"static/media/mswasth-mock.bce3ae72.png\";","import React from 'react';\n\nimport './index.style.scss';\n\nconst Header = ({userDetails, onLoginClick, onLogoutClick} : any) => (\n  <div className='header'>\n    <div className='app-title'>\n      mSwasth\n    </div>\n    { userDetails ?\n      <button className='form-button' onClick={() => onLogoutClick()}>Logout</button>  \n      :\n      <button className='form-button' onClick={() => onLoginClick()}>Login</button>\n    }\n    \n  </div>\n)\n\nexport default Header;","import ACTION_TYPES from \"./actionType.enum\"\nimport DataService from \"../../services/data.service\"\nimport CookieService from '../../services/cookie.service';\n\nexport const loginUser = (userDetails: any) => {\n  return (dispatch: Function) => {\n    const { username, password } = userDetails;\n    DataService.get(\"login\", { username, password }, '', {}\n    ).then((response: any) => {\n      if (response.msg === 'exist') {\n        console.log('user exists');\n        CookieService.set('user', JSON.stringify(userDetails)).then(() => {\n          dispatch(saveUserDetails(userDetails));\n        });\n      }\n    }, (error: any) => {\n        console.log(error);\n    })\n  }\n} \n\nexport const saveUserDetails = (userDetails: any) => {\n  return (dispatch: Function) => {\n    dispatch({\n      type: ACTION_TYPES.LOGIN_SUCCESS,\n      data: userDetails\n    })\n  }\n}\n\nexport const updateLoginDetails = (loginDetails: any) => {\n  return (dispatch: Function) => {\n    dispatch({\n      type: ACTION_TYPES.UPDATE_LOGIN_DETAILS,\n      data: loginDetails\n    })\n  }\n}\n\nexport const logoutUser = () => {\n  return (dispatch: Function) => {\n    DataService.logoutUser().then(() => {\n      dispatch({\n        type: ACTION_TYPES.LOGOUT_USER,\n        data: null\n      })\n    });\n  }\n}\n","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { Redirect, withRouter } from \"react-router-dom\";\nimport {updateLoginDetails, loginUser} from './actions';\n\nimport \"./index.style.scss\"\n\ninterface Props {\n  loggedIn: boolean,\n  loginDetails: any,\n  updateLoginDetails: Function,\n  loginUser: Function\n}\n\nclass Login extends React.Component<Props>{\n  \n  updateUsername = (username: string) => {\n    this.props.updateLoginDetails({...this.props.loginDetails, username: username})\n  }\n\n  updatePassword = (password: string) => {\n    this.props.updateLoginDetails({...this.props.loginDetails, password: password})\n  }\n\n  render() {\n    console.log(this.props);\n    const { username, password } = this.props.loginDetails;\n    const { loggedIn } = this.props;\n    \n    return (\n    <>\n        { !loggedIn ?\n          <div className=\"login-container\">\n            <h3 className=\"app-title\">mSwasth</h3>\n            <div className=\"form-field\">\n              <label>Username</label>\n              <input\n                type=\"text\"\n                value={username}\n                onChange={(e) => { this.updateUsername(e.target.value) }}\n              />\n            </div>\n            <div className=\"form-field\">\n              <label>Password</label>\n              <input\n                type=\"password\"\n                value={password}\n                onChange={(e) => { this.updatePassword(e.target.value) }}\n              />\n            </div>\n            <button className='form-button' onClick={() => this.props.loginUser(this.props.loginDetails)}>Login</button>\n          </div>\n          : (\n            <Redirect to={'/patient-records'}/>\n          )\n        }\n      </>\n    )\n  }\n}\n\nconst mapStateToProps = (state:any) => ({\n  loginDetails: state.loginReducer.loginDetails,\n  loggedIn: state.loginReducer.loggedIn\n})\n\nconst mapDispatchToProps = (dispatch: Function) => ({\n  updateLoginDetails: (loginDetails: any) => {\n    dispatch(updateLoginDetails(loginDetails))\n  },\n  loginUser: (userDetails: any) => {\n    dispatch(loginUser(userDetails))\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps) (Login)","import React from 'react'\nimport Modal from 'react-modal';\nimport mSwasthMockImg from '../../assets/img/mswasth-mock.png';\nimport Header from '../../components/Header';\nimport Login from '../Login';\n\nimport './index.style.scss';\n\nModal.setAppElement('#root')\n\nconst customStyles = {\n  overlay: {\n    inset                   : 0,\n    backgroundColor         : \"rgba(0,0,0,0.5)\"\n  },\n  content: {\n    border          : 'none',\n    background: 'none',\n    top             : '50%',\n    transform       : 'translate(0, -50%)'\n  }\n};\n\ninterface Props {\n\n}\n\ninterface State {\n  isLoginModalOpen: boolean\n}\n\nclass Landing extends React.Component<Props, State> {\n  \n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      isLoginModalOpen: false\n    }\n  }\n\n  handleLoginClick = () => {\n    this.setState({ isLoginModalOpen: true });\n  }\n\n  componentDidMount() {\n    \n  }\n  \n  render() {\n    return (\n      <div className='mswasth-crm-page'>\n        <Header onLoginClick={this.handleLoginClick} />\n        <div className='meta-info-container'>\n          <div className='meta-info-text'>\n            <h3>\n              Empower your practice with mSwasth\n            </h3>\n            <p>WhatsApp is the most popular messaging platform in India with 400mn+ users.</p>\n            <p>Just sign up and add patient details to get started.</p>\n          </div>\n          <div className='meta-info-image'>\n            <img src={mSwasthMockImg} className='mock-image' />\n          </div>\n        </div>\n        <Modal\n          isOpen={this.state.isLoginModalOpen}\n          onRequestClose={() => {\n            this.setState({ isLoginModalOpen: false })\n          }}\n          style={customStyles}\n          shouldCloseOnOverlayClick={true}\n          shouldCloseOnEsc={true}\n          contentLabel=\"Login\"\n        >\n          <Login />\n        </Modal>\n      </div>\n    )\n  }\n}\n\nexport default Landing;","import ACTION_TYPES from \"./actionType.enum\"\nimport DataService from \"../../services/data.service\"\nimport cookieService from \"../../services/cookie.service\"\n\nconst dummyPatients = [\n  {\n    name: 'Mrs. Shashi',\n    mobileNumber: '9823722332',\n    lastCheckupTimestamp: 1611426600000,\n    nextCheckupTimestamp: 1612377000000\n  },\n  {\n    name: 'Mr. Akash',\n    mobileNumber: '9823722332',\n    lastCheckupTimestamp: 1611426600000,\n    nextCheckupTimestamp: 1612463400000\n  },\n  {\n    name: 'Mrs. Virali',\n    mobileNumber: '9823722332',\n    lastCheckupTimestamp: 1611513000000,\n    nextCheckupTimestamp: 1612463400000\n  },\n  {\n    name: 'Mr. Sanjay',\n    mobileNumber: '9823722332',\n    lastCheckupTimestamp: 1611513000000,\n    nextCheckupTimestamp: 1612549800000\n  },\n  {\n    name: 'Mrs. Akriti',\n    mobileNumber: '9823722332',\n    lastCheckupTimestamp: 1611685800000,\n    nextCheckupTimestamp: 1612549800000\n  },\n  {\n    name: 'Mr. Shashi',\n    mobileNumber: '9823722332',\n    lastCheckupTimestamp: 1611685800000,\n    nextCheckupTimestamp: 1612722600000\n  },\n  {\n    name: 'Mr. Gulati',\n    mobileNumber: '9823722332',\n    lastCheckupTimestamp: 1611772200000,\n    nextCheckupTimestamp: 1612722600000\n  },\n  {\n    name: 'Mrs. Khambiya',\n    mobileNumber: '9823722332',\n    lastCheckupTimestamp: 1611772200000,\n    nextCheckupTimestamp: 1612895400000\n  },\n  {\n    name: 'Mr. Amol',\n    mobileNumber: '9823722332',\n    lastCheckupTimestamp: 1611858600000,\n    nextCheckupTimestamp: 1612895400000\n  },\n  {\n    name: 'Mrs. Shivani',\n    mobileNumber: '9823722332',\n    lastCheckupTimestamp: 1611858600000,\n    nextCheckupTimestamp: 1612981800000\n  },\n  {\n    name: 'Mrs. Shivani',\n    mobileNumber: '9823722332',\n    lastCheckupTimestamp: 1611858600000,\n    nextCheckupTimestamp: 1612981800000\n  }\n]\n\nconst dummyPatientRecords = {\n  list: dummyPatients,\n  pagination: {\n    totalPages: 2,\n    pageNumber: 1,\n    pageSize: 10\n  }\n}\n\nexport const getPatientRecords = (pagination: any) => {\n  return async (dispatch: Function) => {\n    let loggedInUser = await DataService.getLoggedInUserFromStorage();\n    if (loggedInUser) {\n      DataService.get(\"getPatientRecords\", loggedInUser, {}, { fake: false, data: dummyPatientRecords }).then((response: any) => {\n        if (response && response.data) {\n          dispatch({\n            type: ACTION_TYPES.PATIENT_RECORDS_SUCCESS,\n            data: response.data\n          })\n        }\n      }) \n    } else {\n    }\n  }\n}","import React from \"react\"\nimport { connect } from \"react-redux\"\nimport { getPatientRecords } from './actions';\nimport { logoutUser, saveUserDetails } from '../Login/actions';\nimport Header from '../../components/Header';\n\nimport \"./index.style.scss\"\nimport DataService from \"../../services/data.service\";\n\ninterface Props {\n  patientRecords: any,\n  userDetails: any,\n  getPatientRecords: Function,\n  logoutUser: Function,\n  saveUserDetails: Function,\n  loggedOut: boolean,\n  history: any\n}\n\nclass PatientRecords extends React.Component <Props>{\n  \n  componentDidMount() {\n    this.getAuthDetails();\n    this.props.getPatientRecords(this.props.patientRecords.pagination)\n  }\n\n  getAuthDetails = () => {\n    DataService.getLoggedInUserFromStorage().then(user => {\n      if (user) {\n        this.props.saveUserDetails(user);\n      }\n    })\n  }\n  \n  render() {\n    console.log(this.props);\n    const { patientRecords, userDetails, loggedOut } = this.props;\n    const { list: patientList, pagination } = patientRecords;\n    \n    if (loggedOut) {\n      this.props.history.replace({pathname: '/'})\n    }\n\n    return (\n      <div className='patient-records-container'>\n        { userDetails ?\n          <>\n          <Header userDetails={userDetails} onLogoutClick={() => this.props.logoutUser()}/>\n          { patientRecords && patientRecords.length &&\n            (<div className='patient-list'>\n              {\n                patientRecords.map((patientItem: any, index: number) => (\n                  <div className='patient-card' key={`${patientItem.doc_id}${index}`}>\n                    <div className='patient-name'>{patientItem.name}</div>\n                    <div className='patient-number'>{patientItem.contact_number}</div>\n                    <div className='patient-next-appointment'>\n                      <p>Next Appointment</p>\n                      <p>{patientItem.next_checkdate}</p>\n                    </div>\n                  </div>\n              ))}\n            </div>\n            )}\n          </> : \n          <p>logged out...</p>\n        }\n        \n      </div>\n    )\n  }\n}\n\nconst mapStateToProps = (state: any) => {\n  console.log(state);\n  return {\n    patientRecords: state.patientRecordsReducer.patientRecords,\n    userDetails: state.loginReducer.userDetails,\n    loggedOut: state.loginReducer.loggedOut\n  }\n}\n\nconst mapDispatchToProps = (dispatch: Function) => ({\n  getPatientRecords: (pagination: any) => {\n    dispatch(getPatientRecords(pagination))\n  },\n  logoutUser: () => {\n    dispatch(logoutUser())\n  },\n  saveUserDetails: (userDetails: any) => {\n    dispatch(saveUserDetails(userDetails))\n  }\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PatientRecords)","import React from \"react\"\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\"\n\nimport ProtectedRoute from '../components/ProtectedRoute';\nimport Landing from \"../containers/Landing\"\nimport Login from \"../containers/Login\"\nimport PatientRecords from \"../containers/PatientRecords\"\n\nconst router = () => (\n  <Router basename='/'>\n    <Switch>\n      <Route exact path=\"/\" component={Landing} />\n        \n      <Route exact path=\"/login\" component={Login} />\n      <ProtectedRoute path=\"/patient-records\" component={PatientRecords} />\n      \n    </Switch>\n  </Router>\n)\n\nexport default router\n","import { ReportHandler } from \"web-vitals\"\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import(\"web-vitals\").then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import React from \"react\"\nimport ReactDOM from \"react-dom\"\nimport { Provider } from \"react-redux\"\nimport store from \"./store/\"\n\nimport \"./index.css\"\nimport AppRouter from \"./router/\"\n\nimport reportWebVitals from \"./reportWebVitals\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <AppRouter />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n)\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals()\n"],"sourceRoot":""}